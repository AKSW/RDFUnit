package org.aksw.rdfunit.webdemo.view;

import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.server.ClassResource;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.FileResource;
import com.vaadin.ui.*;
import org.aksw.rdfunit.Utils.CacheUtils;
import org.aksw.rdfunit.enums.TestGenerationType;
import org.aksw.rdfunit.sources.Source;
import org.aksw.rdfunit.tests.generators.monitors.TestGeneratorExecutorMonitor;
import org.aksw.rdfunit.webdemo.RDFUnitDemoCommons;
import org.aksw.rdfunit.webdemo.RDFUnitDemoSession;
import org.aksw.rdfunit.webdemo.utils.WorkflowUtils;

import java.io.File;

/**
 * @author Dimitris Kontokostas
 *         Description
 * @since 11/20/13 5:20 PM
 */
public class TestGenerationView extends VerticalLayout implements TestGeneratorExecutorMonitor, WorkflowItem {

    private final Button generateTestsButton = new Button("Generate tests");
    private final Button generateTestsCancelButton = new Button("Cancel");
    private final ProgressBar generateTestsProgress = new ProgressBar();
    private final Label generateTestsProgressLabel = new Label("0/0");

    private final Table resultsTable = new Table("Test Results");

    private WorkflowItem previous;
    private WorkflowItem next;

    private volatile boolean isReady = false;
    private volatile boolean inProgress = false;


    public TestGenerationView() {
        initLayout();

    }

    public void initLayout() {
        this.setWidth("100%");


        HorizontalLayout genHeader = new HorizontalLayout();
        genHeader.setSpacing(true);
        genHeader.setWidth("100%");
        this.addComponent(genHeader);

        genHeader.addComponent(generateTestsButton);
        genHeader.setComponentAlignment(generateTestsButton, Alignment.MIDDLE_CENTER);
        genHeader.addComponent(generateTestsProgress);
        genHeader.setComponentAlignment(generateTestsProgress, Alignment.MIDDLE_CENTER);
        genHeader.addComponent(generateTestsProgressLabel);
        genHeader.setComponentAlignment(generateTestsProgressLabel, Alignment.MIDDLE_CENTER);
        genHeader.addComponent(generateTestsCancelButton);
        genHeader.setComponentAlignment(generateTestsCancelButton, Alignment.MIDDLE_CENTER);


        resultsTable.setHeight("250px");
        resultsTable.setWidth("100%");
        resultsTable.addContainerProperty("Type", String.class, null);
        resultsTable.addContainerProperty("URI", Link.class, null);
        resultsTable.addContainerProperty("Automatic", AbstractComponent.class, null);
        resultsTable.addContainerProperty("Manual", AbstractComponent.class, null);
        resultsTable.setColumnCollapsingAllowed(true);
        resultsTable.setSelectable(true);
        resultsTable.setVisible(false);

        this.addComponent(resultsTable);

        initInteractions();
    }

    public void clearTableRowsAndHide() {
        resultsTable.removeAllItems();
        resultsTable.setVisible(false);
    }

    @Override
    public void generationStarted(final Source source, final long numberOfSources) {
        resultsTable.setVisible(true);
        resultsTable.setPageLength((int) Math.min(7, numberOfSources));
        UI.getCurrent().push();
    }

    @Override
    public void sourceGenerationStarted(final Source source, TestGenerationType generationType) {

        Link uriLink = new Link(source.getUri(), new ExternalResource(source.getUri()));
        uriLink.setTargetName("_blank");
        resultsTable.addItem(new Object[]{
                source.getClass().getSimpleName(), uriLink, new Label("-"), new Label("-")}, source);
        resultsTable.setCurrentPageFirstItemIndex(resultsTable.getCurrentPageFirstItemIndex() + 1);
        UI.getCurrent().push();
    }

    @Override
    public void sourceGenerationExecuted(final Source source, final TestGenerationType generationType, final long testsCreated) {
        Item item = resultsTable.getItem(source);
        if (testsCreated == 0)
            return;

        String column = (generationType.equals(TestGenerationType.AutoGenerated) ? "Automatic" : "Manual");
        Property<Link> statusProperty = item.getItemProperty(column);
        String fileName = "";
        if (generationType.equals(TestGenerationType.AutoGenerated)) {
            fileName = CacheUtils.getSourceAutoTestFile(RDFUnitDemoSession.getBaseDir() + "tests/", source);
            statusProperty.setValue(new Link("" + testsCreated, new FileResource(new File(fileName))));
        } else {
            fileName = CacheUtils.getSourceManualTestFile("/org/aksw/rdfunit/tests/", source);
            statusProperty.setValue(new Link("" + testsCreated, new ClassResource(fileName)));
        }
        UI.getCurrent().push();
    }

    @Override
    public void generationFinished() {

        isReady = true;
        inProgress = false;
        generateTestsButton.setEnabled(true);
        UI.getCurrent().push();
    }

    @Override
    public void setMessage(String message, boolean isError) {

    }

    @Override
    public boolean isReady() {
        return false;
    }

    @Override
    public void setReady(boolean isReady) {
        this.isReady = isReady;
    }

    @Override
    public void setPreviousItem(WorkflowItem item) {
        previous = item;
    }

    @Override
    public void setNextItem(WorkflowItem item) {
        next = item;
    }

    @Override
    public WorkflowItem getPreviousItem() {
        return null;
    }

    @Override
    public WorkflowItem getNextItem() {
        return null;
    }

    @Override
    public boolean execute() {
        return false;
    }

    private void initInteractions() {
        // Clicking the button creates and runs a work thread
        generateTestsButton.addClickListener(new Button.ClickListener() {
            public void buttonClick(Button.ClickEvent event) {

                WorkflowItem p = getPreviousItem();
                if (!WorkflowUtils.checkIfPreviousItemIsReady(TestGenerationView.this)) {
                    setMessage("Please Complete previous step correctly", true);
                    return;
                }
                if (inProgress) {
                    setMessage("Generation already in progress, please wait or cancel", true);
                    return;
                }

                isReady = false;
                inProgress = true;
                final TestGenerationThread thread = new TestGenerationThread();
                thread.start();

                // Enable polling and set frequency to 0.5 seconds

            }
        });

        RDFUnitDemoSession.getTestGeneratorExecutor().addTestExecutorMonitor(new TestGeneratorExecutorMonitor() {
            private long count = 0;
            private long total = 0;
            private long tests = 0;

            @Override
            public void generationStarted(final Source source, final long numberOfSources) {
                UI.getCurrent().access(new Runnable() {
                    @Override
                    public void run() {
                        generateTestsCancelButton.setEnabled(true);
                        total = numberOfSources;
                        count = 0;
                        tests = 0;
                        generateTestsProgress.setEnabled(true);
                        generateTestsProgress.setValue(0.0f);
                        generateTestsProgressLabel.setValue("0/" + numberOfSources);
                    }
                });

            }

            @Override
            public void sourceGenerationStarted(Source source, TestGenerationType generationType) {
            }

            @Override
            public void sourceGenerationExecuted(final Source source, final TestGenerationType generationType, final long testsCreated) {
                UI.getCurrent().access(new Runnable() {
                    @Override
                    public void run() {
                        count++;
                        tests += testsCreated;
                        generateTestsProgress.setValue((float) count / total);
                        generateTestsProgressLabel.setValue(count + "/" + total);
                    }
                });
            }

            @Override
            public void generationFinished() {
                UI.getCurrent().access(new Runnable() {
                    @Override
                    public void run() {
                        generateTestsProgress.setValue(1.0f);
                        generateTestsProgressLabel.setValue("Completed! Generated " + tests + " tests");
                        generateTestsCancelButton.setEnabled(false);
                    }
                });
            }
        });

        generateTestsCancelButton.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                RDFUnitDemoSession.getTestGeneratorExecutor().cancel();
            }
        });
    }

    class TestGenerationThread extends Thread {

        @Override
        public void run() {

            //createConfigurationFromUser();
            if (RDFUnitDemoSession.getRDFUnitConfiguration() != null) {
                Source dataset = RDFUnitDemoSession.getRDFUnitConfiguration().getTestSource();

                RDFUnitDemoSession.getTestGeneratorExecutor().addTestExecutorMonitor(TestGenerationView.this);

                RDFUnitDemoSession.setTestSuite(
                        RDFUnitDemoSession.getTestGeneratorExecutor().generateTestSuite(
                                RDFUnitDemoSession.getBaseDir() + "tests/",
                                dataset,
                                RDFUnitDemoCommons.getRDFUnit().getAutoGenerators()));

//                if (RDFUnitDemoSession.getTestSuite().size() != 0) {
//                    UI.getCurrent().access(new Runnable() {
//                        @Override
//                        public void run() {
//                            startTestingButton.setEnabled(true);
//                        }
//                    });
//                }
//                } else {
//                    UI.getCurrent().access(new Runnable() {
//                        @Override
//                        public void run() {
//                            generateTestsButton.setEnabled(true);
//                        }
//                    });
//                }

            }
        }
    }
}
