@prefix ex: <http://example.com/ns#> .

@prefix xsd:        <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:        <http://www.w3.org/2002/07/owl#> .

# A few sample ontology definitions used for testing

ex:Person a owl:Class.
ex:Place a owl:Class.
ex:Work a owl:Class.

# All classes disjoint with each other
# Should generate 3 test cases
[ a owl:AllDisjointClasses ;
  owl:members ex:Person, ex:Place, ex:Work ].

# Some subclasses

ex:Politician rdfs:subClassOf ex:Person .
ex:Athlete rdfs:subClassOf ex:Person .
ex:SoccerPlayer rdfs:subClassOf ex:Athlete .

ex:PopulatedPlace rdfs:subClassOf ex:Place .
ex:Town rdfs:subClassOf ex:PopulatedPlace .

ex:name
    a owl:DatatypeProperty ;
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:string ;  # should generate 1 test case
    .

ex:birthDate
	a owl:DatatypeProperty,
		owl:FunctionalProperty ; # Should generate 2 test cases
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:date ;    # should generate 1 test case
    .

ex:age
	a owl:DatatypeProperty,
        owl:FunctionalProperty ; # Should generate 2 test cases
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:nonNegativeInteger ;    # should generate 1 test case
    .

ex:livesIn
	a owl:ObjectProperty ;
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range ex:Place ;    # should generate 2 test case
    .

ex:homepage
	a owl:ObjectProperty,
		owl:InverseFunctionalProperty; # should generate 1 test case
	rdfs:domain ex:Person ;  # should generate 2 test cases
	.

ex:multRanges a owl:ObjectProperty ;
    rdfs:range ex:Politician, ex:Athlete . # double range

###################
### cardinality ###
###################

ex:CardExact0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardExact0 exactly 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact0;
        owl:cardinality "0"^^xsd:nonNegativeInteger
    ] ;
	.

ex:CardExact1Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardExact1 exactly 1
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact1;
        owl:cardinality "1"^^xsd:nonNegativeInteger
    ] ;
	.

ex:CardExact3Class
	a owl:Class ;
    rdfs:subClassOf [               # ex:cardExact3 exactly 3
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact3 ;
        owl:cardinality "3"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMin0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardMin0 min 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMin0;
        owl:minCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMin2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMin2 min 2
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMin2 ;
        owl:minCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMax0Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMax0 max 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMax0 ;
        owl:maxCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMax2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMax2 max 2
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMax2 ;
        owl:maxCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .

######################################
### Qualified cardinality (Class)  ###
######################################

ex:QCardExact0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:qCardExact0 exactly 0
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardExact0;
        owl:onClass ex:QCardExact0;
        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger
    ] ;
	.

ex:QCardExact1Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:qCardExact1 exactly 1
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardExact1;
        owl:onClass ex:QCardExact1;
        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger
    ] ;
	.

ex:QCardExact3Class
	a owl:Class ;
    rdfs:subClassOf [               # ex:qCardExact3 exactly 3
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardExact3 ;
        owl:onClass ex:QCardExact3 ;
        owl:qualifiedCardinality "3"^^xsd:nonNegativeInteger
    ] ;
    .

ex:QCardMin0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:qCardMin0 min 0
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardMin0;
        owl:onClass ex:QCardMin0;
        owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:QCardMin2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:qCardMin2 min 2
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardMin2 ;
        owl:onClass ex:QCardMin2 ;
        owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .

ex:QCardMax0Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:qCardMax0 max 0
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardMax0 ;
        owl:onClass ex:QCardMax0 ;
        owl:maxQualifiedCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:QCardMax2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:qCardMax2 max 2
        rdf:type owl:Restriction;
        owl:onProperty ex:qCardMax2 ;
        owl:onClass ex:QCardMax2 ;
        owl:maxQualifiedCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .

############################
### Literals / Datatypes ###
############################

# rdf:langString
ex:langStringProperty a rdf:property ;
	rdfs:range rdf:langString .

# non literal properties
ex:literalP1 a owl:DatatypeProperty ;
    rdfs:range xsd:string  .
ex:literalP2 a rdf:Property ;
    rdfs:range xsd:string .

# non literal properties
ex:nonLiteralP1 a owl:ObjectProperty .
ex:nonLiteralP3 a rdf:Property ;
    rdfs:range ex:Person.