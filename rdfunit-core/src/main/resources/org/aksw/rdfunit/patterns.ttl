@prefix rutp: <http://rdfunit.aksw.org/data/patterns#> .
@prefix rut: <http://rdfunit.aksw.org/ns/core#> .

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix spin: <http://spinrdf.org/spin#> .


##########################################
#### rdfs:range pattern (exists but wrong)
##########################################

rutp:RDFSRANGE a rut:Pattern ;
    dcterms:identifier "RDFSRANGE" ;
    dcterms:description """Emulates the rdfs:range constrain and checks when range is wrongly defined"""@en ;
    rut:sparqlWherePattern """ {
                                    ?s %%P1%% ?resource.
                                    FILTER EXISTS {
                                        ?resource rdf:type ?anyClass . }
                                    FILTER NOT EXISTS {
                                        ?resource rdf:type/rdfs:subClassOf* %%T1%%  }
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?s %%P1%% ?resource .} """ ;
    rut:parameter rutp:RDFSRANGE-P1 ;
    rut:parameter rutp:RDFSRANGE-T1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .


rutp:RDFSRANGE-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:RDFSRANGE-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

##########################################
#### rdfs:range pattern (not defined in the dataset)
##########################################

rutp:RDFSRANGE-MISS a rut:Pattern ;
    dcterms:identifier "RDFSRANGE-MISS" ;
    dcterms:description """Emulates the rdfs:range constrain and checks if the range is not defined withing the dataset"""@en ;
    rut:sparqlWherePattern """ {
                                    ?s %%P1%% ?resource.
                                    FILTER NOT EXISTS {
                                        ?resource rdf:type ?anyClass . }
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?s %%P1%% ?resource .} """ ;
    rut:parameter rutp:RDFSRANGE-MISS-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .


rutp:RDFSRANGE-MISS-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

##########################################
#### rdfs:range (datatype) pattern
##########################################

rutp:RDFSRANGED a rut:Pattern ;
    dcterms:identifier "RDFSRANGED" ;
    dcterms:description """Emulates the rdfs:range (datatype) constrain."""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?c.
                                    FILTER (DATATYPE(?c) != %%D1%%)
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c .} """ ;
    rut:parameter rutp:RDFSRANGED-P1 ;
    rut:parameter rutp:RDFSRANGED-D1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .


rutp:RDFSRANGED-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:RDFSRANGED-D1 a rut:Parameter ;
    dcterms:identifier "D1" ;
    rut:parameterConstraint rut:None .

##########################################
#### rdfs:domain pattern (exists but wrong)
##########################################

rutp:RDFSDOMAIN a rut:Pattern ;
    dcterms:identifier "RDFSDOMAIN" ;
    dcterms:description """Checks if the rdfs:domain is wrongly defined. It can be extended by using specific values in V1"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% %%V1%%
                                    FILTER EXISTS {
                                        ?resource rdf:type ?anyClass  }
                                    FILTER NOT EXISTS {
                                        ?resource rdf:type/rdfs:subClassOf* %%T1%% . }
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c .} """ ;
    rut:parameter rutp:RDFSDOMAIN-P1 ;
    rut:parameter rutp:RDFSDOMAIN-V1 ;
    rut:parameter rutp:RDFSDOMAIN-T1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:RDFSDOMAIN-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:RDFSDOMAIN-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None .

rutp:RDFSDOMAIN-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

##########################################
#### rdfs:domain pattern (missing in the dataset)
##########################################

rutp:RDFSDOMAIN-MISS a rut:Pattern ;
    dcterms:identifier "RDFSDOMAIN-MISS" ;
    dcterms:description """Checks if the rdfs:domain is missing. It can be extended by using specific values in V1"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% %%V1%%
                                    FILTER NOT EXISTS {
                                        ?resource rdf:type ?anyClass .}
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c .} """ ;
    rut:parameter rutp:RDFSDOMAIN-MISS-P1 ;
    rut:parameter rutp:RDFSDOMAIN-MISS-V1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:RDFSDOMAIN-MISS-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:RDFSDOMAIN-MISS-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None .



##########################################
#### owl:disjointClass pattern  (#TODO fix transitive)
##########################################

rutp:OWLDISJC a rut:Pattern ;
    dcterms:identifier "OWLDISJC" ;
    dcterms:description """Emulates the owl:disjointClass constrain"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource rdf:type/rdfs:subClassOf* %%T1%% .
                                    ?resource rdf:type/rdfs:subClassOf* %%T2%% .
                                } """ ;
    rut:sparqlPrevalencePattern """  """ ;
    rut:parameter rutp:OWLDISJC-T1 ;
    rut:parameter rutp:OWLDISJC-T2 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue rdf:type
    ];
    .

rutp:OWLDISJC-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

rutp:OWLDISJC-T2 a rut:Parameter ;
    dcterms:identifier "T2" ;
    rut:parameterConstraint rut:Class .

##########################################
#### owl:propertyDisjointWith pattern
##########################################

rutp:OWLDISJP a rut:Pattern ;
    dcterms:identifier "OWLDISJP" ;
    dcterms:description """Emulates the owl:disjointProperty constrain"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?v .
                                    ?resource %%P2%% ?v .
                                } """ ;
    rut:sparqlPrevalencePattern """  """ ;
    rut:parameter rutp:OWLDISJP-P1 ;
    rut:parameter rutp:OWLDISJP-P2 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%""", """%%P2%%"""
    ];
    .

rutp:OWLDISJP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:OWLDISJP-P2 a rut:Parameter ;
    dcterms:identifier "P2" ;
    rut:parameterConstraint rut:Property .

##########################################
#### owl cardinality constrains pattern
##########################################

rutp:OWLCARD a rut:Pattern ;
    dcterms:identifier "OWLCARD" ;
    dcterms:description """Emulates the owl:cardinality constrain without a Class constraint"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?c.
                                } GROUP BY ?resource
                                HAVING ( ( count(?c)  %%OP%% %%V1%% ) && ( count(?c)  != 0 ) ) """ ;    #count!=0 see https://issues.apache.org/jira/browse/JENA-750
    rut:sparqlPrevalencePattern """ SELECT  (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c. }""" ;
    rut:parameter rutp:OWLCARD-P1 ;
    rut:parameter rutp:OWLCARD-OP ;
    rut:parameter rutp:OWLCARD-V1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLCARD-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:OWLCARD-OP a rut:Parameter ;
    dcterms:identifier "OP" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern """<|<=|>|>=|=|!=""" .

rutp:OWLCARD-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None ;
    rut:constraintPattern """[0-9]*""" .

##########################################
#### owl cardinality constrains pattern on Class
##########################################

rutp:OWLCARDT a rut:Pattern ;
    dcterms:identifier "OWLCARDT" ;
    dcterms:description """Emulates the owl:cardinality constrain on a Class"""@en ;
    rut:sparqlWherePattern """ {
									{
                                    	?resource rdf:type/rdfs:subClassOf* %%T1%%.
                                    	?resource %%P1%% ?c.
									}
                                } GROUP BY ?resource
                                HAVING ( ( count(?c)  %%OP%% %%V1%% ) && ( count(?c)  != 0 ) ) """ ;  #count!=0 see https://issues.apache.org/jira/browse/JENA-750
    rut:sparqlPrevalencePattern """ SELECT  (count( DISTINCT ?resource) AS ?total) WHERE { {
                                    	?resource rdf:type/rdfs:subClassOf* %%T1%%.
                                    	?resource %%P1%% ?c.
									} }""" ;
    rut:parameter rutp:OWLCARDT-T1 ;
    rut:parameter rutp:OWLCARDT-P1 ;
    rut:parameter rutp:OWLCARDT-OP ;
    rut:parameter rutp:OWLCARDT-V1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLCARDT-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

rutp:OWLCARDT-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:OWLCARDT-OP a rut:Parameter ;
    dcterms:identifier "OP" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern """<|<=|>|>=|=|!=""" .

rutp:OWLCARDT-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None ;
    rut:constraintPattern """[0-9]*""" .

##########################################
#### Type & Property dependency (equivalent to card > 0)
##########################################

rutp:TYPRODEP a rut:Pattern ;
    dcterms:identifier "TYPRODEP" ;
    dcterms:description """ A property must or must not exist in a class instance. Use 'NOT' for existence and '' for non existence"""@en ;
    rut:sparqlWherePattern """ {
                                    {
										?resource rdf:type/rdfs:subClassOf* %%T1%% .
                                    	FILTER %%NOT%% EXISTS {?resource %%P1%% ?v }
									}
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT  (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource rdf:type/rdfs:subClassOf* %%T1%% .} """ ;
    rut:parameter rutp:TYPRODEP-T1 ;
    rut:parameter rutp:TYPRODEP-NOT ;
    rut:parameter rutp:TYPRODEP-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:TYPRODEP-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

rutp:TYPRODEP-NOT a rut:Parameter ;
    dcterms:identifier "NOT" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern """NOT|""" .

rutp:TYPRODEP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### unique value constraint of inverse functional properties
################################################################################

rutp:INVFUNC a rut:Pattern ;
    dcterms:identifier "INVFUNC" ;
    dcterms:description """ Unique value constraint of inverse functional properties """@en ;
    rut:sparqlWherePattern """ {
                                    ?a %%P1%% ?resource .
                                    ?b %%P1%% ?resource .
                                    FILTER (?a != ?b)
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?a %%P1%% ?resource . }""" ;
    rut:parameter rutp:INVFUNC-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:INVFUNC-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### unique value constraint of inverse functional properties  (on a Class)
################################################################################

rutp:INVFUNCT a rut:Pattern ;
    dcterms:identifier "INVFUNCT" ;
    dcterms:description """ Unique value constraint of inverse functional properties (constraint on a class) """@en ;
    rut:sparqlWherePattern """ {
                                    ?a %%P1%% ?resource ;
                                       rdf:type/rdfs:subClassOf* %%T1%% .
                                    ?b %%P1%% ?resource ;
                                       rdf:type/rdfs:subClassOf* %%T1%% .
                                    FILTER (?a != ?b)
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE {?a %%P1%% ?resource ; rdf:type/rdfs:subClassOf* %%T1%% }""" ;
    rut:parameter rutp:INVFUNCT-P1 ;
    rut:parameter rutp:INVFUNCT-T1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:INVFUNCT-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:INVFUNCT-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

################################################################################
#### symmetric properties involved in only one axiom (only 'one-way'), e.g.
#### ex:bernd dbo:spouse ex:alice . is mentioned, but not
#### ex:alice dbo:spouse ex:bernd .
################################################################################

rutp:OWLSYMMETRICPROP a rut:Pattern ;
    dcterms:identifier "OWLSYMMETRICPROP" ;
    dcterms:description """ Given the case that a certain property p is symmetric, it is assumed that for two resources x and y being related to each other via this property, both statements a p b. and b p a. exist in the dataset """@en ;
    rut:sparqlWherePattern """ {
                                    ?resource  %%P1%% ?r1 .
                                    FILTER NOT EXISTS {?r1 %%P1%% ?resource } .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( *) AS ?total)
                                     WHERE { ?r1 %%P1%% ?r2 . }""" ;
    rut:parameter rutp:OWLSYMMETRICPROP-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLSYMMETRICPROP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### a property that is asymmetric is used as symmetric property, as in
#### ex:bernd dbo:child ex:alice . and
#### ex:alice dbo:child bernd .
################################################################################

rutp:OWLASYMMETRICPROP a rut:Pattern ;
    dcterms:identifier "OWLASYMMETRICPROP" ;
    dcterms:description """ Given a property that is asymmetric, this pattern finds cases where it is nonetheless used as symmetric property """@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?r2 .
                                    ?r2 %%P1%% ?resource .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE {?resource %%P1%% ?r2 .}""";
    rut:parameter rutp:OWLASYMMETRICPROP-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLASYMMETRICPROP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### in a dataset a transitive property is used for statements like
#### ex:alice dbo:family ex:bernd . and
#### ex:bernd dbo:family ex:charly . 
#### but the consequent statement
#### ex:alic dbo:family ex:charly is missing
################################################################################

rutp:OWLTRANSPROP a rut:Pattern ;
    dcterms:identifier "OWLTRANSPROP" ;
    dcterms:description """ Given a transitive property, this pattern finds missing statements containing the consequent transitive entailments """@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?r2 .
                                    ?r2 %%P1%% ?r3 .
                                    FILTER NOT EXISTS {?resource %%P1%% ?r3} .
                                }""" ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE {?resource %%P1%% ?r2 .}""" ;
    rut:parameter rutp:OWLTRANSPROP-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLTRANSPROP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### Given an irreflexive property p there should not be any triples like
#### ex:sth p ex:sth . 
################################################################################

rutp:OWLIRREFLEXIVE a rut:Pattern ;
    dcterms:identifier "OWLIRREFLEXIVE" ;
    dcterms:description """ Given an irreflexive property, this pattern find violating statement that nontheless use this property reflexively """@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?resource .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE {?resource %%P1%% ?o .}""" ;
    rut:parameter rutp:OWLIRREFLEXIVE-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:OWLIRREFLEXIVE-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### COMP
#### Comparison between two literal values in a resource
################################################################################

rutp:COMP a rut:Pattern ;
    dcterms:identifier "COMP" ;
    dcterms:description """Comparison between two literal values in a resource"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?beforeVal .
                                    ?resource %%P2%% ?afterVal .
                                    FILTER ( ?beforeVal %%OP%% ?afterVal )
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total) WHERE {
                                        ?resource %%P1%% ?beforeVal .
                                        ?resource %%P2%% ?afterVal .
                                     }""" ;
    rut:parameter rutp:COMP-P1 ;
    rut:parameter rutp:COMP-P2 ;
    rut:parameter rutp:COMP-OP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%""", """%%P2%%"""
    ];
    .

rutp:COMP-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:COMP-P2 a rut:Parameter ;
    dcterms:identifier "P2" ;
    rut:parameterConstraint rut:Property .

rutp:COMP-OP a rut:Parameter ;
    dcterms:identifier "OP" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern """<|<=|>|>=|=|!=""" .

################################################################################
#### MATCH
#### Literal in not in a desired pattern
################################################################################

rutp:MATCH a rut:Pattern ;
    dcterms:identifier "MATCH" ;
    dcterms:description """Literal in not in a desired pattern"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?value .
                                    FILTER (%%OP%% regex(str(?value), '%%REGEX%%')) .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?value . }""" ;
    rut:parameter rutp:MATCH-P1 ;
    rut:parameter rutp:MATCH-OP ;
    rut:parameter rutp:MATCH-REGEX ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:MATCH-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:MATCH-OP a rut:Parameter ;
    dcterms:identifier "OP" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern """!|""" .

rutp:MATCH-REGEX a rut:Parameter ;
    dcterms:identifier "REGEX" ;
    rut:parameterConstraint rut:None .

################################################################################
#### LITRAN
#### Literal in specific range
################################################################################

rutp:LITRAN a rut:Pattern ;
    dcterms:identifier "LITRAN" ;
    dcterms:description """Literal in specific range"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource rdf:type/rdfs:subClassOf* %%T1%% .
                                    ?resource %%P1%% ?value .
                                    FILTER( %%NOP%% ( ?value > %%valueMin%% &&
                                                      ?value < %%valueMax%% )) .
                                }""" ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total) WHERE {
                                        ?resource rdf:type/rdfs:subClassOf* %%T1%% .
                                        ?resource %%P1%% ?value .
                                     }""" ;
    rut:parameter rutp:LITRAN-T1 ;
    rut:parameter rutp:LITRAN-P1 ;
    rut:parameter rutp:LITRAN-NOP ;
    rut:parameter rutp:LITRAN-valueMin ;
    rut:parameter rutp:LITRAN-valueMax ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:LITRAN-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

rutp:LITRAN-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:LITRAN-NOP a rut:Parameter ;
    dcterms:identifier "NOP" ;
    rut:parameterConstraint rut:Operator ;
    rut:constraintPattern "!|" .

rutp:LITRAN-valueMin a rut:Parameter ;
    dcterms:identifier "valueMin" ;
    rut:parameterConstraint rut:None ;
    rut:constraintPattern """[0-9]*\\.[0-9]*""" .

rutp:LITRAN-valueMax a rut:Parameter ;
    dcterms:identifier "valueMax" ;
    rut:parameterConstraint rut:None ;
    rut:constraintPattern """[0-9]*\\.[0-9]*""" .

################################################################################
#### TYPDEP
#### Resource is of type A and not of type B
################################################################################

rutp:TYPDEP a rut:Pattern ;
    dcterms:identifier "TYPDEP" ;
    dcterms:description """Resource is of type A and not of type B"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource rdf:type/rdfs:subClassOf* %%T1%% .
                                    FILTER NOT EXISTS {?resource rdf:type/rdfs:subClassOf* %%T2%%}
                                } """ ;
      
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource rdf:type/rdfs:subClassOf* %%T1%% . }""" ;
    rut:parameter rutp:TYPDEP-T1 ;
    rut:parameter rutp:TYPDEP-T2 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue rdf:type
    ];
    .

rutp:TYPDEP-T1 a rut:Parameter ;
    dcterms:identifier "T1" ;
    rut:parameterConstraint rut:Class .

rutp:TYPDEP-T2 a rut:Parameter ;
    dcterms:identifier "T2" ;
    rut:parameterConstraint rut:Class .

################################################################################
#### PVT
#### Resources with a propertyA having valueA should contain a triple with
#### propertyB
################################################################################

rutp:PVT a rut:Pattern ;
    dcterms:identifier "PVT" ;
    dcterms:description """Resources with a propertyA having valueA should contain a triple with propertyB"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% %%V1%%
                                    FILTER NOT EXISTS {?resource %%P2%% ?p}
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% %%V1%% }""" ;
    rut:parameter rutp:PVT-P1 ;
    rut:parameter rutp:PVT-V1 ;
    rut:parameter rutp:PVT-P2 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%""", """%%P2"""
    ];
    .

rutp:PVT-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:PVT-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None .

rutp:PVT-P2 a rut:Parameter ;
    dcterms:identifier "P2" ;
    rut:parameterConstraint rut:Property .

################################################################################
#### TRIPLE
#### Resource has ValueA for PropertyA
################################################################################

rutp:TRIPLE a rut:Pattern ;
    dcterms:identifier "TRIPLE" ;
    dcterms:description """Resource has ValueA for PropertyB"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% %%V1%% .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?value . }""" ;
    rut:parameter rutp:TRIPLE-P1 ;
    rut:parameter rutp:TRIPLE-V1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:TRIPLE-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:TRIPLE-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None .

################################################################################
#### ONELANG
#### Resource has more than one plain literal of a certain language assigned
#### (e.g. more than one foaf:name in english)
################################################################################

rutp:ONELANG a rut:Pattern ;
    dcterms:identifier "ONELANG" ;
    dcterms:description """Resource has more than one plain literal of a certain language assigned"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?c1 ;
                                              %%P1%% ?c2 .
                                    FILTER ( (?c1 != ?c2) && (lang(?c1) = '%%V1%%') && (lang(?c1) = lang(?c2)) ) .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c .}""" ;
    rut:parameter rutp:ONELANG-P1 ;
    rut:parameter rutp:ONELANG-V1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:ONELANG-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .

rutp:ONELANG-V1 a rut:Parameter ;
    dcterms:identifier "V1" ;
    rut:parameterConstraint rut:None .


################################################################################
#### ONELANGGLOBAL
#### Resource has more than one plain literal of a certain language assigned
#### (e.g. more than one foaf:name in english)
################################################################################

rutp:ONELANGGLOBAL a rut:Pattern ;
    dcterms:identifier "ONELANGGLOBAL" ;
    dcterms:description """Resource has more than one plain literal of any language assigned"""@en ;
    rut:sparqlWherePattern """ {
                                    ?resource %%P1%% ?c1 ;
                                              %%P1%% ?c2 .
                                    FILTER ( (?c1 != ?c2) && (lang(?c1) = lang(?c2)) ) .
                                } """ ;
    rut:sparqlPrevalencePattern """ SELECT (count( DISTINCT ?resource) AS ?total)
                                     WHERE { ?resource %%P1%% ?c .}""" ;
    rut:parameter rutp:ONELANGGLOBAL-P1 ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty spin:violationPath ;
        rut:annotationValue """%%P1%%"""
    ];
    .

rutp:ONELANGGLOBAL-P1 a rut:Parameter ;
    dcterms:identifier "P1" ;
    rut:parameterConstraint rut:Property .



