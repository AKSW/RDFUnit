package org.aksw.databugger.ui.components;

import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import org.aksw.databugger.enums.TestGenerationType;
import org.aksw.databugger.sources.Source;
import org.aksw.databugger.tests.TestExecutor;
import org.aksw.databugger.tests.TestGeneratorExecutor;
import org.aksw.databugger.tests.UnitTest;

/**
 * User: Dimitris Kontokostas
 * Description
 * Created: 11/20/13 5:20 PM
 */
public class TestGenerationComponent extends VerticalLayout implements TestGeneratorExecutor.TestGeneratorExecutorMonitor {

    private Table resultsTable = new Table("Test Results");

    public TestGenerationComponent(){
        initLayout();

    }

    public void initLayout(){
        this.setWidth("100%");

        resultsTable.setHeight("200px");
        resultsTable.addContainerProperty("Type", String.class, null);
        resultsTable.addContainerProperty("URI", String.class, null);
        resultsTable.addContainerProperty("A", String.class, null);
        resultsTable.addContainerProperty("M", String.class, null);
        resultsTable.setColumnCollapsingAllowed(true);
    }

    @Override
    public void generationStarted(final Source source, final long numberOfSources)  {
        UI.getCurrent().access(new Runnable() {
            @Override
            public void run() {
                resultsTable.setPageLength((int) Math.min(7,numberOfSources));
                TestGenerationComponent.this.addComponent(resultsTable);
            }
        });
        //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void sourceGenerationStarted(final Source source, TestGenerationType generationType) {
        UI.getCurrent().access(new Runnable() {
            @Override
            public void run() {
                resultsTable.addItem(new Object[] {
                source.getClass().getSimpleName(),source.getUri(),"-","-"},source) ;
                resultsTable.setCurrentPageFirstItemIndex(resultsTable.getCurrentPageFirstItemIndex()+1);
            }
        });
    }

    @Override
    public void sourceGenerationExecuted(final Source source, final TestGenerationType generationType, final long testsCreated) {
        UI.getCurrent().access(new Runnable() {
            @Override
            public void run() {
                Item item = resultsTable.getItem(source);
                if (testsCreated == 0)
                    return;

                String column = (generationType == TestGenerationType.AutoGenerated ? "A" : "M");
                Property<String> statusProperty = item.getItemProperty(column);
                statusProperty.setValue("" + testsCreated);
            }
        });
    }

    @Override
    public void generationFinished() {

        UI.getCurrent().access(new Runnable() {
            @Override
            public void run() {

            }
        });

    }
}
