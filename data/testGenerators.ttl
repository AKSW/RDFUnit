@prefix tddd: <http://databugger.aksw.org/patterns#> .
@prefix tddo: <http://databugger.aksw.org/ontology#> .
@prefix tddg: <http://databugger.aksw.org/generators#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .

##########################################
#### rdfs:range pattern
##########################################

# Class range
tddg:RDFSRANGEC a tddo:TestGenerator ;
    dcterms:description """Generate all rdfs:range constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ select distinct ?P1 ('+' as ?OP) ?T1 where {
                              {
                              ?P1 rdfs:range ?T1 .
                              ?T1 rdf:type <http://www.w3.org/2000/01/rdf-schema#Class> .
                              FILTER ( (str(?T1) != "http://www.w3.org/2002/07/owl#Thing") &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Resource") &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Literal")  &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Class")  &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Datatype")  &&
                                       (str(?T1) != "http://www.w3.org/1999/02/22-rdf-syntax-ns#Property") )
                              } UNION {
                              ?P1 rdfs:range ?T1 .
                              ?T1 rdf:type <http://www.w3.org/2002/07/owl#Class> .
                              FILTER ( (str(?T1) != "http://www.w3.org/2002/07/owl#Thing") &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Resource") &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Literal")  &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Class")  &&
                                       (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Datatype")  &&
                                       (str(?T1) != "http://www.w3.org/1999/02/22-rdf-syntax-ns#Property") )} } """ ;
    tddo:basedOnPattern tddd:RDFSRANGE .

# Datatype range
tddg:RDFSRANGED a tddo:TestGenerator ;
    dcterms:description """Generate all rdfs:range constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ select distinct ?P1 ?D1 where {
                              {
                                  ?P1 rdfs:range ?D1 .
                                  ?P1 rdf:type <http://www.w3.org/1999/02/22-rdf-syntax-ns#Property> .
                                  FILTER ( STRSTARTS(str(?D1), "http://www.w3.org/2001/XMLSchema#") ).
                              } UNION {
                                  ?P1 rdfs:range ?D1 .
                                  ?D1 rdf:type <http://www.w3.org/2000/01/rdf-schema#Datatype> .
                              } UNION {
                                  ?P1 rdfs:range ?D1 .
                                  ?P1 rdf:type+ <http://www.w3.org/2002/07/owl#DatatypeProperty> .
                              } FILTER ( (str(?D1) != "http://www.w3.org/2000/01/rdf-schema#Literal")  &&
                                         (str(?D1) != "http://www.w3.org/2001/XMLSchema#string")  ) } """ ;
    tddo:basedOnPattern tddd:RDFSRANGED .


##########################################
#### rdfs:domain pattern
##########################################

tddg:RDFSDOMAIN a tddo:TestGenerator ;
    dcterms:description """Generate all rdfs:domain constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ select distinct ?P1 ('?v1' as ?V1) ('+' as ?OP) ?T1 where {
                             ?P1 rdfs:domain ?T1 .
                             FILTER ( (str(?T1) != "http://www.w3.org/2002/07/owl#Thing") &&
                                      (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Resource") &&
                                      (str(?T1) != "http://www.w3.org/1999/02/22-rdf-syntax-ns#Property") &&
                                      (str(?T1) != "http://www.w3.org/2000/01/rdf-schema#Class"))} """ ;
    tddo:basedOnPattern tddd:RDFSDOMAIN .


##########################################
#### owl:disjointClass pattern
##########################################

tddg:OWLDISJC a tddo:TestGenerator ;
    dcterms:description """Generate all owl:disjointWith constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?T1 ?T2 WHERE {
                             ?T1 owl:disjointWith ?T2 . } """ ;
    tddo:basedOnPattern tddd:OWLDISJC .


##########################################
#### owl:propertyDisjointWith pattern
##########################################

tddg:OWLDISJP a tddo:TestGenerator ;
    dcterms:description """Generate all owl:propertyDisjointWith constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ?P2 WHERE {
                             ?P1 owl:propertyDisjointWith ?P2 . } """ ;
    tddo:basedOnPattern tddd:OWLDISJP .


##########################################
#### owl:complementOf pattern
##########################################

tddg:OWLCOMPL a tddo:TestGenerator ;
    dcterms:description """Generate all owl:complementOf constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?T1 ?T2 WHERE {
                             ?T1 owl:complementOf ?T2 . } """ ;
    tddo:basedOnPattern tddd:OWLDISJC .

##########################################
#### owl cardinality constrains generators
##########################################

# owl:cardinality number > 0 (count restriction if exists)
tddg:OWLCARD a tddo:TestGenerator ;
    dcterms:description """Generates owl:cardinality constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('!=' as ?OP) (str(?v)  as ?V2) WHERE {
                             ?P1 owl:cardinality ?v .
                             FILTER (?v > 0) .} """ ;
    tddo:basedOnPattern tddd:OWLCARD .

# owl:cardinality number > 0 (exists in db)
tddg:OWLCARDEX a tddo:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the property exists at least once"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?T1 ('+' as ?OP) ?P1 WHERE {
                             ?P1 owl:cardinality ?v .
                             ?P1 rdfs:domain ?T1 .
                             FILTER (?v > 0) .} """ ;
    tddo:basedOnPattern tddd:TYPRODEP .

# owl:cardinality number = 0 (must not exist)
tddg:OWLCARD0 a tddo:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the cardinality is 0"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('?v1' as ?V1) WHERE {
                             ?P1 owl:cardinality ?v .
                             FILTER (?v = 0) .} """ ;
    tddo:basedOnPattern tddd:TRIPLE .

# owl:minCardinality number > 0 (count restriction if exists)
tddg:OWLCARD-MIN a tddo:TestGenerator ;
    dcterms:description """Generates owl:minCardinality constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('<=' as ?OP) (str(?v)  as ?V2) WHERE {
                             ?P1 owl:minCardinality ?v . } """ ;
    tddo:basedOnPattern tddd:OWLCARD .

# owl:minCardinality number > 0 (exists in db)
tddg:OWLCARDEX-MIN a tddo:TestGenerator ;
    dcterms:description """ Generates owl:minCardinality constrains. We ensure that the property exists at least once"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?T1 ('+' as ?OP) ?P1 WHERE {
                             ?P1 owl:minCardinality ?v .
                             ?P1 rdfs:domain ?T1 .
                             FILTER (?v > 0) .} """ ;
    tddo:basedOnPattern tddd:TYPRODEP .

# owl:manCardinality number > 0 (count restriction if exists)
tddg:OWLCGARD-MAX a tddo:TestGenerator ;
    dcterms:description """Generates owl:cardinality constrains defined in a schema"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('>' as ?OP) (str(?v)  as ?V2) WHERE {
                             ?P1 owl:maxCardinality ?v .
                             FILTER (?v > 0) . } """ ;
    tddo:basedOnPattern tddd:OWLCARD .

# owl:maxCardinality number = 0 (must not exist
tddg:OWLCARD-MAX0 a tddo:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the cardinality < 0"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('?v1' as ?V1)  WHERE {
                              ?P1 owl:maxCardinality ?v .
                              FILTER (?v = 0) . } """ ;
    tddo:basedOnPattern tddd:TRIPLE .

##########################################
#### owl functional property constrains generators
##########################################

tddg:OWLFUNC a tddo:TestGenerator ;
    dcterms:description """ Generates owl:FunctionalProperty constrains. IF the property exists we ensure it exists only once"""@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 ('!=' as ?OP) ('1'  as ?V1) WHERE {
                             ?P1 rdf:type+ owl:FunctionalProperty . } """ ;
    tddo:basedOnPattern tddd:OWLCARD .

################################################################################
### owl inverse functional property constraints generator
################################################################################

tddg:OWLINVFUNC a tddo:TestGenerator ;
    dcterms:description """ Generates owl:InverseFunctionalProperty constraints. If such a property exists we ensure that resources are assigned only once via this property """@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 WHERE {
                                ?P1 a owl:InverseFunctionalProperty .
                              }""" ;
    tddo:basedOnPattern tddd:INVFUNC .


################################################################################
#### owl symmetric property constraints generator
################################################################################

# tddg:OWLSYMMETRICPROP a tddo:TestGenerator ;
#    dcterms:description """ Generates owl:SymmetricProperty constraints. If such a property exists we ensure that statements about the involved resources are made in both directions, i.e. both resources will appear will apear in subject and object position, respectively """@en ;
#    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 WHERE {
#                                ?P1 a owl:SymmetricProperty .
#                              }""" ;
#    tddo:basedOnPattern tddd:OWLSYMMETRICPROP .


################################################################################
#### owl asymmetric property constraints generator
################################################################################

tddg:OWLASYMMETRICPROP a tddo:TestGenerator ;
    dcterms:description """ Generates owl:AsymmetricProperty constraints. Given a statement with an asymmetric property we ensure that no inverse statements with the same property exist in the dataset """@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 WHERE {
                                ?P1 a owl:AsymmetricProperty .
                              } """ ;
    tddo:basedOnPattern tddd:OWLASYMMETRICPROP .


################################################################################
#### owl transitive property constraints generator
################################################################################

# tddg:OWLTRANSPROP a tddo:TestGenerator ;
#    dcterms:description """ Generates owl:TransitiveProperty constraints. Given multiple related transitive statements we ensure that no statements containing the consequent transitive entailments are missing """@en ;
#    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 WHERE {
#                                ?P1 a owl:TransitiveProperty .
#                              }""" ;
#    tddo:basedOnPattern tddd:OWLTRANSPROP .


################################################################################
#### owl irreflexive property constrains generator
################################################################################

tddg:OWLIRREFLEXIVE a tddo:TestGenerator ;
    dcterms:description """ Generates owl:IrreflexiveProperty constraints. Given an irreflexive property we ensure that it is not used reflexively """@en ;
    tddo:generatorSPARQL """ SELECT DISTINCT ?P1 WHERE {
                                ?P1 a owl:IrreflexiveProperty .
                              }""" ;
    tddo:basedOnPattern tddd:OWLIRREFLEXIVE .


# TODO owl:deprecated (TRIPLE Pattern)
# An annotation with the owl:deprecated annotation property and the value equal to "true"^^xsd:boolean can be used to specify that an IRI is deprecated.