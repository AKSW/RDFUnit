@prefix ex: <http://example.com/ns#> .

@prefix xsd:        <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:        <http://www.w3.org/2002/07/owl#> .

# A few sample ontology definitions used for testing

ex:Person a owl:Class.
ex:Place a owl:Class.
ex:Work a owl:Class.

# All classes disjoint with each other
# Should generate 3 test cases
[ a owl:AllDisjointClasses ;
  owl:members ex:Person, ex:Place, ex:Work ].

# Some subclasses

ex:Athlete rdfs:subClassOf ex:Person .
ex:SoccerPlayer rdfs:subClassOf ex:Athlete .

ex:PopulatedPlace rdfs:subClassOf ex:Place .
ex:Town rdfs:subClassOf ex:PopulatedPlace .

ex:name
    a owl:DatatypeProperty ;
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:string ;  # should generate 1 test case
    .

ex:birthDate
	a owl:DatatypeProperty,
		owl:FunctionalProperty ; # Should generate 2 test cases
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:date ;    # should generate 1 test case
    .

ex:age
	a owl:DatatypeProperty,
        owl:FunctionalProperty ; # Should generate 2 test cases
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range xsd:nonNegativeInteger ;    # should generate 1 test case
    .

ex:livesIn
	a owl:ObjectProperty ;
    rdfs:domain ex:Person ;  # should generate 2 test cases
    rdfs:range ex:Place ;    # should generate 2 test case
    .

ex:homepage
	a owl:ObjectProperty,
		owl:InverseFunctionalProperty; # should generate 1 test case
	rdfs:domain ex:Person ;  # should generate 2 test cases
	.

###################
### cardinality ###
###################

ex:CardExact0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardExact0 exactly 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact0;
        owl:cardinality "0"^^xsd:nonNegativeInteger
    ] ;
	.

ex:CardExact1Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardExact1 exactly 1
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact1;
        owl:cardinality "1"^^xsd:nonNegativeInteger
    ] ;
	.

ex:CardExact3Class
	a owl:Class ;
    rdfs:subClassOf [               # ex:cardExact3 exactly 3
        rdf:type owl:Restriction;
        owl:onProperty ex:cardExact3 ;
        owl:cardinality "3"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMin0Class
	a owl:Class ;
	rdfs:subClassOf [               # ex:cardMin0 min 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMin0;
        owl:minCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMin2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMin2 min 2
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMin2 ;
        owl:minCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMax0Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMax0 max 0
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMax0 ;
        owl:maxCardinality "0"^^xsd:nonNegativeInteger
    ] ;
    .

ex:CardMax2Class
    a owl:Class ;
    rdfs:subClassOf [               # ex:cardMax2 max 2
        rdf:type owl:Restriction;
        owl:onProperty ex:cardMax2 ;
        owl:maxCardinality "2"^^xsd:nonNegativeInteger
    ] ;
    .