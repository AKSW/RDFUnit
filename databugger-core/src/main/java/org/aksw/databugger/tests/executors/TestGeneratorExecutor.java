package org.aksw.databugger.tests.executors;

import org.aksw.databugger.Utils.CacheUtils;
import org.aksw.databugger.Utils.TestUtils;
import org.aksw.databugger.enums.TestGenerationType;
import org.aksw.databugger.exceptions.TripleReaderException;
import org.aksw.databugger.io.TripleFileReader;
import org.aksw.databugger.io.TripleFileWriter;
import org.aksw.databugger.sources.SchemaSource;
import org.aksw.databugger.sources.Source;
import org.aksw.databugger.tests.TestAutoGenerator;
import org.aksw.databugger.tests.TestCase;
import org.aksw.databugger.tests.TestSuite;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * User: Dimitris Kontokostas
 * handles test generation form a schema or a cache
 * Created: 11/20/13 7:31 PM
 */
public class TestGeneratorExecutor {
    private static final Logger log = LoggerFactory.getLogger(TestGeneratorExecutor.class);
    private boolean isCanceled = false;
    private final boolean loadFromCache;
    private final boolean useManualTests;

    public TestGeneratorExecutor() {
        this.loadFromCache = true;
        this.useManualTests = true;
    }

    public TestGeneratorExecutor(boolean loadFromCache, boolean useManualTests) {
        this.loadFromCache = loadFromCache;
        this.useManualTests = useManualTests;
    }

    private final List<TestGeneratorExecutorMonitor> progressMonitors = new ArrayList<TestGeneratorExecutorMonitor>();


    public void cancel() {
        isCanceled = true;
    }


    public TestSuite generateTestSuite(String testFolder, Source dataset, List<TestAutoGenerator> autoGenerators) {

        List<SchemaSource> sources = dataset.getReferencesSchemata();


        /*notify start of testing */
        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.generationStarted(dataset, sources.size());
        }

        List<TestCase> allTests = new ArrayList<TestCase>();
        for (SchemaSource s : sources) {
            if (isCanceled) {
                break;
            }

            log.info("Generating tests for: " + s.getUri());

            //Generate auto tests from schema
            allTests.addAll(generateAutoTestsForSchemaSource(testFolder, s, autoGenerators));

            //Find manual tests for schema
            if (useManualTests)
                allTests.addAll(generateManualTestsForSource(testFolder, s));
        }

        //Find manual tests for dataset (if not canceled
        if (!isCanceled && useManualTests)
            allTests.addAll(generateManualTestsForSource(testFolder, dataset));

        /*notify start of testing */
        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.generationFinished();
        }

        return new TestSuite(allTests);
    }

    private List<TestCase> generateAutoTestsForSchemaSource(String testFolder, SchemaSource s, List<TestAutoGenerator> autoGenerators) {
        List<TestCase> tests = new ArrayList<TestCase>();

        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.sourceGenerationStarted(s, TestGenerationType.AutoGenerated);
        }

        try {
            String cachedTestsLocation = CacheUtils.getSourceAutoTestFile(testFolder, s);
            if (!loadFromCache)
                cachedTestsLocation = ""; // non existing path
            List<TestCase> testsAutoCached = TestUtils.instantiateTestsFromModel(
                    new TripleFileReader(cachedTestsLocation).read());
            tests.addAll(testsAutoCached);
            log.info(s.getUri() + " contains " + testsAutoCached.size() + " automatically created tests (loaded from cache)");

        } catch (TripleReaderException e) {
            // cannot read from file  / generate
            List<TestCase> testsAuto = TestUtils.instantiateTestsFromAG(autoGenerators, s);
            tests.addAll(testsAuto);
            TestUtils.writeTestsToFile(testsAuto, new TripleFileWriter(CacheUtils.getSourceAutoTestFile(testFolder, s)));
            log.info(s.getUri() + " contains " + testsAuto.size() + " automatically created tests");
        }

        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.sourceGenerationExecuted(s, TestGenerationType.AutoGenerated, tests.size());
        }

        return tests;
    }

    private List<TestCase> generateManualTestsForSource(String testFolder, Source s) {
        List<TestCase> tests = new ArrayList<TestCase>();

        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.sourceGenerationStarted(s, TestGenerationType.ManuallyGenerated);
        }
        try {
            List<TestCase> testsManuals = TestUtils.instantiateTestsFromModel(
                    new TripleFileReader(CacheUtils.getSourceManualTestFile(testFolder, s)).read());
            tests.addAll(testsManuals);
            log.info(s.getUri() + " contains " + testsManuals.size() + " manually created tests");
        } catch (TripleReaderException e) {
            // Do nothing, Manual tests do not exist
        }

        for (TestGeneratorExecutorMonitor monitor : progressMonitors) {
            monitor.sourceGenerationExecuted(s, TestGenerationType.ManuallyGenerated, tests.size());
        }

        return tests;


    }


    public void addTestExecutorMonitor(TestGeneratorExecutorMonitor monitor) {
        progressMonitors.add(monitor);
    }

    public void removeTestExecutorMonitor(TestGeneratorExecutorMonitor monitor) {
        progressMonitors.remove(monitor);
    }
}
