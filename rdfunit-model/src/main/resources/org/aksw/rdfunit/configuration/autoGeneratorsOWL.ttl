@prefix rutp: <http://rdfunit.aksw.org/data/patterns#> .
@prefix rut: <http://rdfunit.aksw.org/ns/core#> .
@prefix rutg: <http://rdfunit.aksw.org/data/generators#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix rlog: <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdqv: <http://rdfunit.aksw.org/ns/rdqv#> .


##########################################
#### rdfs:range pattern
##########################################

# Class range wrongly defined
rutg:RDFSRANGEC a rut:TestGenerator ;
    dcterms:description """Generate all rdfs:range constrains defined in a schema (when range is wrongly defined)""" ;
    rut:sparqlGenerator """ select distinct ?P1  ?T1  ?DESCRIPTION where {
                              ?P1 (rdfs:range|schema:rangeIncludes) ?T1 .

                              # don't check for datatypes / literals here
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) rdfs:Literal }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) rdfs:Datatype }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) owl:DatatypeProperty }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) schema:DataType }

                              # it must be defined that the range is a class
                              ?T1 rdf:type/rdfs:subClassOf* ?class .
                              FILTER ( ?class IN (owl:Class, rdfs:Class, schema:Class) )

                              # don't check for general classes
                              FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class ))

							  # Keep unique schema:rangeIncludes only (rdfs:range is cinjunctive)
                              FILTER NOT EXISTS {?P1 schema:rangeIncludes ?T2 .
                                                    FILTER (?T1 != ?T2)
                              }

                              FILTER (!isBlank(?T1))

                              BIND (concat(str(?P1),' has different range from: ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:RDFSRANGE ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeClassConstraint] ;
    .


# Class range missing
rutg:RDFSRANGEC-MISS a rut:TestGenerator ;
    dcterms:description """Generate all rdfs:range constrains defined in a schema (when range is missing)""" ;
    rut:sparqlGenerator """ select distinct ?P1  ?DESCRIPTION where {
                              ?P1 (rdfs:range|schema:rangeIncludes) ?T1 .

							  # don't check for datatypes / literals here
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) rdfs:Literal }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) rdfs:Datatype }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) owl:DatatypeProperty }
                              FILTER NOT EXISTS {?T1 (rdf:type/rdfs:subClassOf*)|(rdfs:subClassOf+) schema:DataType }

							  # it must be defined that the range is a class
							  ?T1 rdf:type/rdfs:subClassOf* ?class .
							  FILTER ( ?class IN (owl:Class, rdfs:Class, schema:Class) )

							  # don't check for general classes
							  FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class ))

							  # Keep unique schema:rangeIncludes only (rdfs:range is cinjunctive)
                              FILTER NOT EXISTS {?P1 schema:rangeIncludes ?T2 .
                                                    FILTER (?T1 != ?T2)
                              }

                              FILTER (!isBlank(?T1))
							  BIND (concat(str(?P1),' is missing proper range') AS ?DESCRIPTION)}   """ ;
    rut:basedOnPattern rutp:RDFSRANGE-MISS ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:WARN] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeClassConstraint] ;
    .

##########################################
#### Literals / Datatypes
##########################################

# Check for Literal
rutg:RDFSRANGEL a rut:TestGenerator ;
    dcterms:description """Check all defined Literals if they are indeed literals""" ;
    rut:sparqlGenerator """ select distinct ?P1 ('' as ?NEG) ('isIRI' as ?FUNC) ?DESCRIPTION where { {
                                {   # xsd datatypes
	                                ?P1 rdfs:range ?D1 .
	                                FILTER ( STRSTARTS(str(?D1), 'http://www.w3.org/2001/XMLSchema#') ).
	                            } UNION {
	                                ?P1 rdfs:range ?D1 .
	                                ?D1 rdf:type/rdfs:subClassOf* rdfs:Datatype .
	                            } UNION {
	                                ?P1 rdfs:range ?D1 .
	                                ?P1 rdf:type/rdfs:subClassOf* owl:DatatypeProperty .
	                            } UNION {
                                    ?P1 rdfs:range ?D1 .
                                    FILTER ( ?D1 in (rdfs:Literal, rdf:langString) ) .
                                } UNION {
                                    ?P1 schema:rangeIncludes ?D1 .
                                    ?D1 rdf:type|rdfs:subClassOf+ schema:DataType .
                                    FILTER ( ?D1 NOT IN ( schema:Text, schema:URL ))
                                }    }
                                FILTER ( ?D1 NOT IN ( <http://ogp.me/ns/class#string>, <http://ogp.me/ns/class#url> ))
                                FILTER (!isBlank(?P1))
                                FILTER (!isBlank(?D1))
                                BIND (concat(str(?P1),' does not contain a literal value (', str(?D1) , ')') AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OBJFUNC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeDatatypeConstraint] ;
    .

# Check for rdf:langString
rutg:RDFLANGSTRING a rut:TestGenerator ;
    dcterms:description """Check all defined Literals if they are indeed literals""" ;
    rut:sparqlGenerator """ select distinct ?P1 ('=' as ?OP) ('' as ?V1) ?DESCRIPTION where {
	                                ?P1 rdfs:range rdf:langString .
                                BIND (concat(str(?P1),' is an rdf:langString and should have a language') AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:CHECKLANG;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeDatatypeConstraint] ;
    .

# Datatype range
rutg:RDFSRANGED a rut:TestGenerator ;
    dcterms:description """Generate all rdfs:range constrains defined in a schema""" ;
    rut:sparqlGenerator """ select distinct ?P1 ?D1 ?DESCRIPTION where {
                              {   # xsd datatypes
                                  ?P1 rdfs:range ?D1 .
                                  FILTER ( STRSTARTS(str(?D1), 'http://www.w3.org/2001/XMLSchema#') ).
                              } UNION {
                                  ?P1 rdfs:range ?D1 .
                                  ?D1 rdf:type/rdfs:subClassOf* rdfs:Datatype .
                              } UNION {
                                  ?P1 rdfs:range ?D1 .
                                  ?P1 rdf:type/rdfs:subClassOf* owl:DatatypeProperty .
                              }
                              FILTER ( ?D1 NOT IN ( rdfs:Literal, xsd:string, schema:Text, schema:URL, <http://ogp.me/ns/class#string>, <http://ogp.me/ns/class#url>) )
                              FILTER (!isBlank(?P1))
                              FILTER (!isBlank(?D1))
                              BIND (concat(str(?P1),' does not have datatype: ', str(?D1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:RDFSRANGED ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeDatatypeConstraint] ;
    .


##########################################
#### NON Literals
##########################################

# Check for Literal
rutg:RDFSRANGENL a rut:TestGenerator ;
    dcterms:description """Check all defined URIs if they are indeed URIs""" ;
    rut:sparqlGenerator """ select distinct ?P1 (' ' as ?NEG) ('isLiteral' as ?FUNC) ?DESCRIPTION where { {
                                {
	                                ?P1 rdfs:range ?D1 .
	                                ?D1 a ?C1 .
	                                ?C1 a ?C2 .
	                                FILTER ( ?C2 IN (rdfs:Class, owl:Class))
	                                FILTER NOT EXISTS {
	                                    ?C1 rdf:type/rdfs:subClassOf* ?C2 .
	                                    FILTER ( ?C2 IN (rdfs:Literal, rdf:langString, rdfs:Datatype, owl:DatatypeProperty))
	                                }
	                            } UNION {
	                                ?P1 rdf:type/rdfs:subClassOf* ?P2 .
	                                FILTER (?P2 IN ( owl:ObjectProperty, owl:InverseFunctionalProperty, owl:IrreflexiveProperty, owl:inverseOf, owl:propertyChainAxiom,
	                                                owl:ReflexiveProperty, owl:SymmetricProperty, owl:TransitiveProperty, owl:bottomObjectProperty, owl:topObjectProperty))
                                } UNION {
                                    ?P1 schema:rangeIncludes ?D1 .
                                    FILTER NOT EXISTS {?D1 rdf:type|rdfs:subClassOf+ schema:DataType .}
                                }    }
                                BIND (concat(str(?P1),' contains a literal value') AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OBJFUNC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:RangeClassConstraint] ;
    .


##########################################
#### rdfs:domain pattern
##########################################

rutg:RDFSDOMAIN a rut:TestGenerator ;
    dcterms:description """Generate all rdfs:domain constrains defined in a schema""" ;
    rut:sparqlGenerator """ select distinct ?P1 ('?v1' as ?V1) ?T1 ?DESCRIPTION where {
                             ?P1 rdfs:domain ?T1 .
                             BIND (concat(str(?P1),' has rdfs:domain different from: ', str(?T1)) AS ?DESCRIPTION)
                             FILTER (!isBlank(?T1))
                             FILTER ( ?T1 NOT IN ( owl:Thing , prov:Entity , rdfs:Resource, rdf:Property, rdfs:Class, rdfs:Datatype ))
                             FILTER ( ?P1 NOT IN ( <http://www.w3.org/ns/rdfa#uri> , <http://www.w3.org/ns/rdfa#term> ))} """ ;
    rut:basedOnPattern rutp:RDFSDOMAIN ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:DomainConstraint] ;
    .


##########################################
#### rdfs:domain missing pattern
##########################################

rutg:RDFSDOMAIN-MISS a rut:TestGenerator ;
    dcterms:description """Generate all rdfs:domain constrains defined in a schema""" ;
    rut:sparqlGenerator """ select distinct ?P1 ('?v1' as ?V1) ?DESCRIPTION where {
                             ?P1 rdfs:domain ?T1 .
                             BIND (concat(str(?P1),' is missing proper domain') AS ?DESCRIPTION)
                             FILTER (!isBlank(?T1))
                             FILTER ( ?T1 NOT IN ( owl:Thing , prov:Entity , rdfs:Resource, rdf:Property, rdfs:Class, rdfs:Datatype ))
                             FILTER ( ?P1 NOT IN ( <http://www.w3.org/ns/rdfa#uri> , <http://www.w3.org/ns/rdfa#term> ))} """ ;
    rut:basedOnPattern rutp:RDFSDOMAIN-MISS ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:WARN] ;
    rut:resultAnnotation [
            a rut:ResultAnnotation ;
            rut:annotationProperty sh:sourceConstraint ;
            rut:annotationValue rdqv:DomainConstraint] ;
    .

##########################################
#### owl:disjointClass pattern (1) (without reverse relations)
##########################################

rutg:OWLDISJC1 a rut:TestGenerator ;
    dcterms:description """Generate all owl:disjointWith constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?T2 ?DESCRIPTION WHERE {
                             ?T1 owl:disjointWith ?T2 .
                             FILTER (!isBlank(?T1))
                             FILTER (!isBlank(?T2))
                             FILTER NOT EXISTS { ?T2 owl:disjointWith ?T1 .  }
                             BIND ( concat('Class ', str(?T1),' is owl:disjointWith with ', str(?T2)) AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLDISJC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:TypeDisjointConstraint] ;
    .

##########################################
#### owl:disjointClass pattern (2) (filter out reverse relations)
##########################################

rutg:OWLDISJC2 a rut:TestGenerator ;
    dcterms:description """Generate all owl:disjointWith constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?T2 ?DESCRIPTION WHERE {
                             ?T1 owl:disjointWith ?T2 .
                             FILTER (!isBlank(?T1))
                             FILTER (!isBlank(?T2))
                             FILTER EXISTS { ?T2 owl:disjointWith ?T1 .  }
                             FILTER (str(?T1) < str(?T2) ).
                             BIND ( concat('Class ', str(?T1),' is owl:disjointWith with ', str(?T2)) AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLDISJC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:TypeDisjointConstraint] ;
    .

##########################################
#### owl:AllDisjointClasses pattern
##########################################

rutg:OWLALLDISJC a rut:TestGenerator ;
    dcterms:description """Generate all owl:disjointWith constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?T2 ?DESCRIPTION WHERE {
                             ?r rdf:type    owl:AllDisjointClasses ;
                                owl:members ?T1 ;
                                owl:members ?T2 .
                             FILTER (!isBlank(?T1))
                             FILTER (!isBlank(?T2))
                             FILTER (str(?T1) < str(?T2) ).
                             BIND ( concat('Class ', str(?T1),' is owl:members of an owl:AllDisjointClasses with ', str(?T2)) AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLDISJC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:TypeDisjointConstraint] ;
    .


##########################################
#### owl:propertyDisjointWith pattern
##########################################

rutg:OWLDISJP a rut:TestGenerator ;
    dcterms:description """Generate all owl:propertyDisjointWith constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?P2 ?DESCRIPTION WHERE {
                             ?P1 owl:propertyDisjointWith ?P2 . 
							 BIND ( concat('Property ', str(?P1),' is owl:propertyDisjointWith with ',str(?P2)) AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLDISJP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:PropertyDisjointConstraint] ;
    .

##########################################
#### owl:AllDisjointProperties pattern
##########################################

rutg:OWLALLDISJP a rut:TestGenerator ;
    dcterms:description """Generate all owl:AllDisjointProperties constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?P2 ?DESCRIPTION WHERE {
                             ?r rdf:type    owl:AllDisjointProperties ;
                                owl:members ?P1 ;
                                owl:members ?P2 .
                             FILTER (str(?P1) < str(?P2) ).
                             BIND ( concat('Property ', str(?P1),' is owl:propertyDisjointWith with ',str(?P2)) AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLDISJP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:PropertyDisjointConstraint] ;
    .


##########################################
#### owl:complementOf pattern
##########################################

rutg:OWLCOMPL a rut:TestGenerator ;
    dcterms:description """Generate all owl:complementOf constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?T2 ?DESCRIPTION WHERE {
                             ?T1 owl:complementOf ?T2 .
                             FILTER (!isBlank(?T1))
                             FILTER (!isBlank(?T2))
							 BIND ( concat(str(?T1),' is owl:complementOf with ', str(?T2)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OWLDISJC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:ComplementOfConstraint] ;
    .

##########################################
#### owl cardinality constrains generators
##########################################

# owl:cardinality number > 0 (count restriction if exists)
rutg:OWLCARD a rut:TestGenerator ;
    dcterms:description """Generates owl:cardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('!=' as ?OP) (str(?v)  as ?V1) ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:cardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' different from ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OWLCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:cardinality number > 0 (exists in db)
rutg:OWLCARDEX a rut:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the property exists at least once""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('NOT' as ?NOT) ?P1 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
							 ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:cardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' different from ', str(?v), ' (is 0) for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPRODEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:cardinality number = 0 (must not exist)
rutg:OWLCARD0 a rut:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the cardinality is 0""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ('?v1' as ?V1) ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:cardinality ?v .
                             FILTER (?v = 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' different from ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TRIPLE ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:minCardinality number > 0 (count restriction if exists)
rutg:OWLCARD-MIN a rut:TestGenerator ;
    dcterms:description """Generates owl:minCardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('<' as ?OP) (str(?v)  as ?V1) ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:minCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' lower than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OWLCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:minCardinality number > 0 (exists in db)
rutg:OWLCARDEX-MIN a rut:TestGenerator ;
    dcterms:description """ Generates owl:minCardinality constrains. We ensure that the property exists at least once""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('NOT' as ?NOT) ?P1 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:minCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' lower than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPRODEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:manCardinality number > 0 (count restriction if exists)
rutg:OWLCGARD-MAX a rut:TestGenerator ;
    dcterms:description """Generates owl:cardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('>' as ?OP) (str(?v)  as ?V1) ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:maxCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' higher than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION) .} """ ;
    rut:basedOnPattern rutp:OWLCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:maxCardinality number = 0 (must not exist)
rutg:OWLCARD-MAX0 a rut:TestGenerator ;
    dcterms:description """ Generates owl:cardinality constrains. We ensure that the cardinality < 0""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('' as ?NOT) ?P1 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction .
                             ?t owl:onProperty ?P1 .
                             ?t owl:maxCardinality ?v .
                             FILTER (?v = 0 && !isBlank(?T1)) .
							 BIND ( concat('Cardinality of ',  str(?P1),' higher than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPRODEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

##########################################
#### owl qualified cardinality constrains generators  (onClass)
##########################################

# owl:qualifiedCardinality number > 0 (count restriction if exists)
rutg:OWLQCARD a rut:TestGenerator ;
    dcterms:description """Generates owl:qualifiedCardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('!=' as ?OP) (str(?v)  as ?V1) ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:qualifiedCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('qualifiedCardinality of ',  str(?P1),' different from ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OWLQCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:qualifiedCardinality number > 0 (exists in db)
rutg:OWLQCARDEX a rut:TestGenerator ;
    dcterms:description """ Generates owl:qualifiedCardinality constrains. We ensure that the property exists at least once""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('NOT' as ?NOT) ?P1 ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
							 ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:qualifiedCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('qualifiedCardinality of ',  str(?P1),' different from ', str(?v), ' (is 0) for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPROTYPEDEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:qualifiedCardinality number = 0 (must not exist)
rutg:OWLQCARD0 a rut:TestGenerator ;
    dcterms:description """ Generates owl:qualifiedCardinality constrains. We ensure that the qualifiedCardinality is 0""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
	                             owl:onProperty ?P1 ;
	                             owl:onClass ?T2 ;
	                             owl:qualifiedCardinality ?v .
                             FILTER (?v = 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('qualifiedCardinality of ',  str(?P1),' different from ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TRIPLEDR ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:minQualifiedCardinality number > 0 (count restriction if exists)
rutg:OWLQCARD-MIN a rut:TestGenerator ;
    dcterms:description """Generates owl:minQualifiedCardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('<' as ?OP) (str(?v)  as ?V1) ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:minQualifiedCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('QualifiedCardinality of ',  str(?P1),' lower than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:OWLQCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:minQualifiedCardinality number > 0 (exists in db)
rutg:OWLQCARDEX-MIN a rut:TestGenerator ;
    dcterms:description """ Generates owl:minQualifiedCardinality constrains. We ensure that the property exists at least once""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('NOT' as ?NOT) ?P1 ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:minQualifiedCardinality ?v .
                             FILTER (?v > 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('QualifiedCardinality of ',  str(?P1),' lower than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPROTYPEDEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:maxQualifiedCardinality number > 0 (count restriction if exists)
rutg:OWLQCARD-MAX a rut:TestGenerator ;
    dcterms:description """Generates owl:maxQualifiedCardinality constrains defined in a schema""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ?P1 ('>' as ?OP) (str(?v)  as ?V1) ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:maxQualifiedCardinality ?v .

                             FILTER (?v > 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('QualifiedCardinality of ',  str(?P1),' higher than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION) .} """ ;
    rut:basedOnPattern rutp:OWLQCARDT ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

# owl:maxQualifiedCardinality number = 0 (must not exist)
rutg:OWLQCARD-MAX0 a rut:TestGenerator ;
    dcterms:description """ Generates owl:maxQualifiedCardinality constrains. We ensure that the cardinality < 0""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?T1 ('' as ?NOT) ?P1 ?T2 ?DESCRIPTION WHERE {
							 ?T1 rdfs:subClassOf+ ?t .
                             ?t a  owl:Restriction ;
                                owl:onProperty ?P1 ;
                                owl:onClass ?T2 ;
                                owl:maxQualifiedCardinality ?v .
                             FILTER (?v = 0 && !isBlank(?T1)) .
                             FILTER (  ?T1 NOT IN ( owl:Thing, prov:Entity, rdfs:Resource, rdfs:Class, rdfs:Datatype, rdf:Property, schema:Property, schema:Class )) .
							 BIND ( concat('QualifiedCardinality of ',  str(?P1),' higher than ', str(?v), ' for type ', str(?T1)) AS ?DESCRIPTION)} """ ;
    rut:basedOnPattern rutp:TYPROTYPEDEP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .


##########################################
#### owl functional property constrains generators
##########################################

rutg:OWLFUNC a rut:TestGenerator ;
    dcterms:description """ Generates owl:FunctionalProperty constrains. IF the property exists we ensure it exists only once""" ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ('!=' as ?OP) ('1'  as ?V1) ?DESCRIPTION WHERE {
							 ?P1 rdf:type/rdfs:subPropertyOf* owl:FunctionalProperty .
							 BIND ( concat(str(?P1),' is an owl:FunctionalProperty and should occur at most once in a resource') AS ?DESCRIPTION) }""" ;
    rut:basedOnPattern rutp:OWLCARD ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:CardinalityConstraint] ;
    .

################################################################################
### owl inverse functional property constraints generator
################################################################################

rutg:OWLINVFUNC a rut:TestGenerator ;
    dcterms:description """ Generates owl:InverseFunctionalProperty constraints. If such a property exists we ensure that resources are assigned only once via this property """ ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?DESCRIPTION WHERE {
                             ?P1 rdf:type/rdfs:subPropertyOf* owl:InverseFunctionalProperty .
							 BIND ( concat(str(?P1),' is an owl:InverseFunctionalProperty and should be unique') AS ?DESCRIPTION) }""" ;
    rut:basedOnPattern rutp:INVFUNC ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:InverseFunctionalPropertyConstraint] ;
    .


################################################################################
#### owl symmetric property constraints generator
################################################################################

rutg:OWLSYMMETRICPROP a rut:TestGenerator ;
    dcterms:description """ Generates owl:SymmetricProperty constraints. If such a property exists we ensure that statements about the involved resources are made in both directions, i.e. both resources will appear will apear in subject and object position, respectively """ ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?DESCRIPTION WHERE {
                              ?P1 rdf:type/rdfs:subPropertyOf* owl:SymmetricProperty .
                              BIND ( concat(str(?P1),' is an owl:SymmetricProperty and the reverse relationship should exist') AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLSYMMETRICPROP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:INFO] ;
    .


################################################################################
#### owl asymmetric property constraints generator
################################################################################

rutg:OWLASYMMETRICPROP a rut:TestGenerator ;
    dcterms:description """ Generates owl:AsymmetricProperty constraints. Given a statement with an asymmetric property we ensure that no inverse statements with the same property exist in the dataset """ ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?DESCRIPTION WHERE {
                             ?P1 rdf:type/rdfs:subPropertyOf* owl:AsymmetricProperty .
							 BIND ( concat(str(?P1),' is an owl:AsymmetricProperty and should be used as an owl:SymetricProperty') AS ?DESCRIPTION) } """ ;
    rut:basedOnPattern rutp:OWLASYMMETRICPROP ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:AsymmetricPropertyConstraint] ;

    .


################################################################################
#### owl transitive property constraints generator
################################################################################

# rutg:OWLTRANSPROP a rut:TestGenerator ;
#    dcterms:description """ Generates owl:TransitiveProperty constraints. Given multiple related transitive statements we ensure that no statements containing the consequent transitive entailments are missing """ ;
#    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?DESCRIPTION WHERE {
#                                ?P1 rdf:type/rdfs:subPropertyOf* owl:TransitiveProperty .
#                            }""" ;
#    rut:basedOnPattern rutp:OWLTRANSPROP .


################################################################################
#### owl irreflexive property constrains generator
################################################################################

rutg:OWLIRREFLEXIVE a rut:TestGenerator ;
    dcterms:description """ Generates owl:IrreflexiveProperty constraints. Given an irreflexive property we ensure that it is not used reflexively """ ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ?DESCRIPTION WHERE {
                             ?P1 rdf:type/rdfs:subPropertyOf* owl:IrreflexiveProperty .
							 BIND ( concat(str(?P1),' is an owl:IrreflexiveProperty and a subject must not be the the object') AS ?DESCRIPTION) }""" ;
    rut:basedOnPattern rutp:OWLIRREFLEXIVE ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:ERROR] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:IrreflexivePropertyConstraint] ;
    .


################################################################################
#### owl DeprecatedProperty warning
################################################################################

rutg:OWLDEPRECATEDP a rut:TestGenerator ;
    dcterms:description """ Generates owl:DeprecatedProperty warnings. """ ;
    rut:sparqlGenerator """ SELECT DISTINCT ?P1 ('?v1'  as ?V1) ?DESCRIPTION WHERE {
                             ?P1 rdf:type/rdfs:subPropertyOf* owl:DeprecatedProperty .
							 BIND ( concat(str(?P1),' is an owl:DeprecatedProperty and should not be used anymore') AS ?DESCRIPTION) }""" ;
    rut:basedOnPattern rutp:TRIPLE ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty rlog:level ;
        rut:annotationValue rlog:WARN] ;
    rut:resultAnnotation [
        a rut:ResultAnnotation ;
        rut:annotationProperty sh:sourceConstraint ;
        rut:annotationValue rdqv:DeprecatedPropertyConstraint] ;
    .

# TODO owl:DeprecatedClass (needs a new transitive type pattern)