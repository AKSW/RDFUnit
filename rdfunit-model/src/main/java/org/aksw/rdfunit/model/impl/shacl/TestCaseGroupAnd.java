package org.aksw.rdfunit.model.impl.shacl;

import com.google.common.collect.ImmutableSet;
import lombok.NonNull;
import org.aksw.rdfunit.enums.RLOGLevel;
import org.aksw.rdfunit.enums.TestAppliesTo;
import org.aksw.rdfunit.enums.TestGenerationType;
import org.aksw.rdfunit.model.impl.results.ShaclTestCaseGroupResult;
import org.aksw.rdfunit.model.interfaces.GenericTestCase;
import org.aksw.rdfunit.model.interfaces.TestCaseAnnotation;
import org.aksw.rdfunit.model.interfaces.TestCaseGroup;
import org.aksw.rdfunit.model.interfaces.results.ShaclLiteTestCaseResult;
import org.aksw.rdfunit.model.interfaces.results.TestCaseResult;
import org.aksw.rdfunit.model.interfaces.shacl.PrefixDeclaration;
import org.aksw.rdfunit.utils.JenaUtils;
import org.aksw.rdfunit.vocabulary.SHACL;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.ResourceFactory;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class TestCaseGroupAnd implements TestCaseGroup {

    private final Resource resource;
    private final ImmutableSet<GenericTestCase> testCases;

    public TestCaseGroupAnd(@NonNull Set<? extends GenericTestCase> testCases) {
        assert(! testCases.isEmpty());
        this.resource = ResourceFactory.createProperty(JenaUtils.getUniqueIri());
        this.testCases = ImmutableSet.copyOf(testCases);
    }

    public boolean isAtomic(){ return testCases.size() == 1; }

    @Override
    public Set<GenericTestCase> getTestCases() {
        return this.testCases;
    }

    @Override
    public SHACL.LogicalConstraint getLogicalOperator() {
        return SHACL.LogicalConstraint.and;
    }

    @Override
    public Collection<TestCaseResult> evaluateInternalResults(Collection<TestCaseResult> internalResults) {
        final Set<Resource> tastCaseUris = TestCaseGroup.getTestCaseUris(getTestCases());
        Map<RDFNode, List<TestCaseResult>> directResults = internalResults.stream()
                .filter(r -> tastCaseUris.contains(r.getTestCaseUri()))
                .filter(r -> ShaclLiteTestCaseResult.class.isAssignableFrom(r.getClass()))
                .map(r -> ((ShaclLiteTestCaseResult) r))
                .collect(Collectors.groupingBy(ShaclLiteTestCaseResult::getFailingNode, Collectors.toList()));

        ImmutableSet.Builder<TestCaseResult> res = ImmutableSet.builder();
        directResults.forEach((focusNode, results) ->{
            res.addAll(results);
            addSummaryResult(res, focusNode, results);
        });
        return res.build();
    }

    void addSummaryResult(ImmutableSet.Builder<TestCaseResult> builder, RDFNode focusNode, List<TestCaseResult> results){
        builder.add(new ShaclTestCaseGroupResult(
                this.resource,
                this.getLogLevel(),
                "At least one test case failed inside a SHACL and constraint.",
                focusNode,
                results
                ));
    }

    @Override
    public TestCaseAnnotation getTestCaseAnnotation() {
        return new TestCaseAnnotation(
                this.resource,
                TestGenerationType.AutoGenerated,
                null,
                TestAppliesTo.Dataset, // TODO check
                SHACL.namespace,      // TODO check
                ImmutableSet.of(),
                "A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes.",
                RLOGLevel.ERROR,
                ImmutableSet.of()   //TODO do I have to add annotations by default?
        );
    }

    @Override
    public Collection<PrefixDeclaration> getPrefixDeclarations() {
        return testCases.stream().flatMap(t -> t.getPrefixDeclarations().stream()).collect(Collectors.toSet());
    }

    @Override
    public Resource getElement() {
        return this.resource;
    }
}
